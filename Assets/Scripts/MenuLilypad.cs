using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MenuLilypad : MonoBehaviour
{
    // create a random direction in the x-z plane for starting movement
    // have a constant speed
    // when it reaches the edge of the screen, change direction
    // if bumps into another lilypad, change direction

    public float speed = 0.25f;
    public Vector3 direction;
    public AudioClip collideClip;
    private Rigidbody rb;
    private Vector3 viewportPos;
    private Camera mainCamera;
    private float edgeThreshold = 0.001f;
    private float initialY;

    private float sinOffset;
    private void Awake()
    {
        rb = GetComponent<Rigidbody>();
    }
    private void Start()
    {
        if (rb == null)
        {
            rb = GetComponent<Rigidbody>();
        }
        transform.rotation = Quaternion.Euler(0, Random.Range(0, 360), 0);
        direction = new Vector3(Random.Range(-1f, 1f), 0, Random.Range(-1f, 1f));
        rb.velocity = direction.normalized * speed;
        rb.angularVelocity = new Vector3(0, Random.Range(0.5f,1), 0);
        mainCamera = Camera.main;
        initialY = transform.position.y;
        sinOffset = Random.Range(0, 2 * Mathf.PI);
    }

    private void FixedUpdate()
    {
        viewportPos = mainCamera.WorldToViewportPoint(transform.position);

        // Check if the object is at the edge of the screen
        bool atLeftEdge = viewportPos.x <= edgeThreshold;
        bool atRightEdge = viewportPos.x >= 1 - edgeThreshold;
        bool atBottomEdge = viewportPos.y <= edgeThreshold;
        bool atTopEdge = viewportPos.y >= 1 - edgeThreshold;

        if (atLeftEdge)
        {
            direction = new Vector3(Mathf.Abs(direction.x), 0, direction.z);
        }
        if (atRightEdge)
        {
            direction = new Vector3(-Mathf.Abs(direction.x), 0, direction.z);
        }
        if (atBottomEdge)
        {
            direction = new Vector3(direction.x, 0, Mathf.Abs(direction.z));
        }
        if (atTopEdge)
        {
            direction = new Vector3(direction.x, 0, -Mathf.Abs(direction.z));
        }
        direction.y = 0;
        rb.velocity = direction.normalized * speed;

        // up and down with sin wave
        transform.position = new Vector3(transform.position.x, initialY + 0.05f + Mathf.Sin(Time.time + sinOffset) * 0.075f, transform.position.z);
    }

    private void OnCollisionEnter(Collision collision)
    {
        direction = collision.GetContact(0).normal;
        direction.y = 0;
        direction = direction.normalized;
        Rigidbody otherRb = collision.rigidbody; // The other object
        Vector3 relativeVelocity = rb.velocity - (otherRb ? otherRb.velocity : Vector3.zero);

        // Calculate the point of contact relative to the object's center of mass
        Vector3 contactPoint = collision.GetContact(0).point - transform.position;
        contactPoint.y = 0;
        // Calculate torque generated by the collision
        Vector3 torque = Vector3.Cross(contactPoint, relativeVelocity);

        // Adjust torque based on mass and inertia
        float angularEffect = 1.25f; // Adjust this factor to control angular velocity
        Vector3 angularVelocityChange = torque * angularEffect / rb.mass;

        // Apply calculated angular velocity
        rb.angularVelocity += angularVelocityChange;

        // Update direction based on collision normal
        direction = collision.GetContact(0).normal.normalized;
        direction.y = 0;
        rb.velocity = direction.normalized * speed;

        PlayCollideClip();
    }

    void PlayCollideClip()
    {
        if (collideClip == null)
        {
            return;
        }
        AudioManager.Instance.KillSFX(collideClip);
        AudioSource source = AudioManager.Instance.PlaySFX(collideClip);
        source.pitch += Random.Range(-0.15f, 0.25f);
    }
}
